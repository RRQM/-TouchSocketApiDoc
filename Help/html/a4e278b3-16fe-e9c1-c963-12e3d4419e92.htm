<!DOCTYPE html ><html lang="zh-CN"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><link rel="stylesheet" href="../css/zh-CN.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>ValueByteBlock 类</title><meta name="Title" content="ValueByteBlock" /><meta name="Help.Id" content="T:TouchSocket.Core.ValueByteBlock" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="TouchSocket.Core" /><meta name="guid" content="a4e278b3-16fe-e9c1-c963-12e3d4419e92" /><meta name="Description" content="字节块流" /><meta name="tocFile" content="../toc/IDC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">TouchSocket手册</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><div id="HeaderPrelimContainer" class="level my-1 px-2"><div id="HeaderTextContainer" class="level-left"><div class="level-item"><span class="has-text-grey-light">一款简单易用的基础网络通讯组件库。</span></div></div></div><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Value<wbr />Byte<wbr />Block 类</h1><div class="summary">
            字节块流
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>命名空间：</strong> <a href="6bd098f4-7c88-a31a-e48b-613ce7814aac.htm">TouchSocket.Core</a><br /><strong>程序集：</strong> TouchSocket.Core (在 TouchSocket.Core.dll 中) 版本：2.0.0+066bf083954fb89f08496aac7db281817c0ab854<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="复制"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>复制</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">ValueByteBlock</span> : <span class="identifier">IWrite</span>, 
	<span class="identifier">IEnumerable</span>&lt;<span class="identifier">byte</span>&gt;, <span class="identifier">IEnumerable</span>, <span class="identifier">IDisposable</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="复制"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>复制</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">ValueByteBlock</span>
	<span class="keyword">Implements</span> <span class="identifier">IWrite</span>, <span class="identifier">IEnumerable</span>(<span class="keyword">Of</span> <span class="identifier">Byte</span>), 
	<span class="identifier">IEnumerable</span>, <span class="identifier">IDisposable</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="复制"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>复制</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">ValueByteBlock</span> = 
    <span class="keyword">class</span>
        <span class="keyword">interface</span> <span class="identifier">IWrite</span>
        <span class="keyword">interface</span> <span class="identifier">IEnumerable</span>&lt;<span class="identifier">byte</span>&gt;
        <span class="keyword">interface</span> <span class="identifier">IEnumerable</span>
        <span class="keyword">interface</span> <span class="identifier">IDisposable</span>
    <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><span class="noLink">Object</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">ValueByteBlock</span></dd></dl><dl class="implementsList"><dt>Implements</dt><dd><span class="noLink">IEnumerable</span><span id="LSTE23151BB_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="noLink">Byte</span><span id="LSTE23151BB_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, <span class="noLink">IEnumerable</span>, <span class="noLink">IDisposable</span>, <a href="b746f288-4676-d239-4f2a-c5fbc5cc7a8e.htm">IWrite</a></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>构造函数</h2><div id="IDAIFASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="5d993db4-c366-7874-14f1-fd95b22d43f8.htm">ValueByteBlock(<span id="LSTE23151BB_2" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_3" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            实例化一个已知内存的对象。且该内存不会被回收。
            </td></tr><tr><td><a href="8c966e47-6313-f77f-c21a-cfbb1e4231ab.htm">ValueByteBlock(Int32)</a></td><td>
             字节块流
            </td></tr><tr><td><a href="c9e701db-db5e-75df-07a1-dbd3ae15e905.htm">ValueByteBlock(<span id="LSTE23151BB_4" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_5" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            实例化一个已知内存的对象。且该内存不会被回收。
            </td></tr><tr><td><a href="dc538b5d-8687-1364-ddf7-5527821b60d2.htm">ValueByteBlock(Int32, BytePool)</a></td><td>
            字节块流
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>属性</h2><div id="ID0JC0FASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="409798cc-43c0-d889-3915-4d2790aca299.htm">Buffer</a></td><td>
            字节实例
            </td></tr><tr><td><a href="e7f96337-a440-3011-203f-650c3b14db42.htm">CanRead</a></td><td>
            仅当内存块可用，且<a href="4c394d9f-1c64-9f61-6802-a203d3119e6d.htm">CanReadLen</a>&gt;0时为True。
            </td></tr><tr><td><a href="4c394d9f-1c64-9f61-6802-a203d3119e6d.htm">CanReadLen</a></td><td>
            还能读取的长度，计算为<a href="c4195669-bbe9-c160-b3fd-683a8e61efc2.htm">Len</a>与<a href="863d168c-8637-c8ae-9d3b-ff89026e5a4a.htm">Pos</a>的差值。
            </td></tr><tr><td><a href="f213da54-1b47-bfb3-d9c0-95b728bf3e97.htm">CanReadLength</a></td><td>
            还能读取的长度，计算为<a href="c4195669-bbe9-c160-b3fd-683a8e61efc2.htm">Len</a>与<a href="863d168c-8637-c8ae-9d3b-ff89026e5a4a.htm">Pos</a>的差值。
            </td></tr><tr><td><a href="720c2c2c-97ab-7582-4e28-f27aaf1ddf35.htm">CanSeek</a></td><td>
            支持查找
            </td></tr><tr><td><a href="6ebe7024-b260-ee75-2e41-d941b8b5a7c1.htm">CanWrite</a></td><td>
            可写入
            </td></tr><tr><td><a href="ee83cde4-0aaa-36d9-badf-9145b3b1b973.htm">Capacity</a></td><td>
            容量
            </td></tr><tr><td><a href="5128d03f-33c0-1b8a-957b-13fd7afe0811.htm">FreeLength</a></td><td>
            空闲长度，准确掌握该值，可以避免内存扩展，计算为<a href="ee83cde4-0aaa-36d9-badf-9145b3b1b973.htm">Capacity</a>与<a href="863d168c-8637-c8ae-9d3b-ff89026e5a4a.htm">Pos</a>的差值。
            </td></tr><tr><td><a href="826e272c-826e-1a73-6391-4c2ecb6b11e1.htm">Holding</a></td><td>
            表示持续性持有，为True时，Dispose将调用无效。
            </td></tr><tr><td><a href="545ed8d0-f821-a04e-43be-d8d162c78053.htm">Item</a></td><td>
            返回或设置索引对应的值。
            </td></tr><tr><td><a href="c4195669-bbe9-c160-b3fd-683a8e61efc2.htm">Len</a></td><td>
            Int真实长度
            </td></tr><tr><td><a href="3d55c47d-e08b-06c4-326f-263baca31212.htm">Length</a></td><td>
            真实长度
            </td></tr><tr><td><a href="863d168c-8637-c8ae-9d3b-ff89026e5a4a.htm">Pos</a></td><td>
            int型流位置
            </td></tr><tr><td><a href="f62a4c34-26a4-f121-7b86-c2924ccdc867.htm">Position</a></td><td>
            流位置
            </td></tr><tr><td><a href="ceabbe23-fc6e-2522-6253-d37901bf6e2a.htm">Using</a></td><td>
            使用状态
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>方法</h2><div id="IDFFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="aa7fd15a-b4e9-9df0-558d-2a0e7533c088.htm">AbsoluteDispose</a></td><td>
            直接完全释放，游离该对象，然后等待GC
            </td></tr><tr><td><a href="20f5c65f-503b-6722-db7f-be6effac8380.htm">AsSpan</a></td><td>
            转换有效数据为<span class="noLink">Span<span id="LSTE23151BB_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTE23151BB_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span>类型。
            </td></tr><tr><td><a href="b258ebcb-6d04-694a-b24c-7cd656e5c572.htm">AsSurplusSpan</a></td><td>
            转换从<a href="f62a4c34-26a4-f121-7b86-c2924ccdc867.htm">Position</a>到结束的有效数据为<span class="noLink">Span<span id="LSTE23151BB_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTE23151BB_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span>类型。
            </td></tr><tr><td><a href="4744ece9-9a7b-515f-d506-a6f6f0554215.htm">Clear</a></td><td>
            清空所有内存数据
            </td></tr><tr><td><a href="8f5a3cff-f9c6-4d0c-27ff-3f11fa29f8f3.htm">Dispose</a></td><td>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</td></tr><tr><td><span class="noLink">Equals</span></td><td>Determines whether the specified object is equal to the current object.<br />(继承自 <span class="noLink">Object</span>。)</td></tr><tr><td><a href="6771b771-7a3b-86c1-1415-724d7495db7b.htm">Flush</a></td><td>
            无实际效果
            </td></tr><tr><td><a href="419bcc54-06a6-4d96-0561-7d2aab5a3213.htm">GetEnumerator</a></td><td>
    Returns an enumerator that iterates through the collection.
  </td></tr><tr><td><span class="noLink">GetHashCode</span></td><td>Serves as the default hash function.<br />(继承自 <span class="noLink">Object</span>。)</td></tr><tr><td><span class="noLink">GetType</span></td><td>Gets the <span class="noLink">Type</span> of the current instance.<br />(继承自 <span class="noLink">Object</span>。)</td></tr><tr><td><a href="9d33180e-e210-3997-b7fb-36e8873d73d0.htm">Read(<span id="LSTE23151BB_10" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_11" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            读取数据，然后递增Pos
            </td></tr><tr><td><a href="757b48ba-7c97-db40-f8f2-de1f71b33898.htm">Read(<span id="LSTE23151BB_12" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_13" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LSTE23151BB_14" data-languageSpecificText="cpp=%"></span>, Int32)</a></td><td>
            读取数据，然后递增Pos
            </td></tr><tr><td><a href="a3ad1166-5ee4-4538-b7bc-a5b38271c019.htm">Read(ValueByteBlock<span id="LSTE23151BB_15" data-languageSpecificText="cpp=%"></span>, Int32)</a></td><td>
            读取数据，然后递增Pos
            </td></tr><tr><td><a href="4ec186e3-f1b4-c5b7-464f-0535ea8e788a.htm">Read(<span id="LSTE23151BB_16" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_17" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            读取数据，然后递增Pos
            </td></tr><tr><td><a href="ff4441fd-b2b1-b9b3-2b6d-a9c47fa2a1dc.htm">ReadBoolean</a></td><td>
            从当前流位置读取1个<span class="noLink">Boolean</span>值
            </td></tr><tr><td><a href="ae23e0d6-5327-5233-abc0-320f9914a7e6.htm">ReadBooleans</a></td><td>
            从当前流位置读取1个字节，按位解析为bool值数组。
            </td></tr><tr><td><a href="d1106d69-9c58-1e43-17f2-d094ddb0a2a6.htm">ReadByte</a></td><td>
            从当前流位置读取一个<span class="noLink">Byte</span>值
            </td></tr><tr><td><a href="a70177c1-a1d4-d499-69df-114ca6b7eb2e.htm">ReadByteBlock</a></td><td>
            从当前流位置读取一个<a href="7812fa1a-471f-638e-df81-c60e2c986666.htm">ByteBlock</a>值。
            <p>
            注意，使用该方式读取到的内存块，会脱离释放周期，所以最好在使用完成后自行释放。
            </p></td></tr><tr><td><a href="5c9eeffd-a8a2-54ae-82ec-2bce929829b5.htm">ReadBytesPackage</a></td><td>
            从当前流位置读取一个独立的<span class="noLink">Byte</span>数组包
            </td></tr><tr><td><a href="8607b3ce-dbe2-84d7-580c-02e274c04930.htm">ReadChar<span id="LSTE23151BB_18" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">Char</span>值
            </td></tr><tr><td><a href="26ed7989-4fa2-aaa3-3032-dea81924d213.htm">ReadChar(EndianType)</a></td><td>
            从当前流位置读取一个<span class="noLink">Char</span>值
            </td></tr><tr><td><a href="a9bb8222-d368-1285-05d9-7e1b77e63f83.htm">ReadDateTime</a></td><td>
            从当前流位置读取一个<span class="noLink">DateTime</span>值
            </td></tr><tr><td><a href="8c2ae17d-32fa-0ebe-3547-487a0be10582.htm">ReadDecimal<span id="LSTE23151BB_19" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">Decimal</span>值
            </td></tr><tr><td><a href="1afd4992-e480-c9ff-7676-fda3e3b6307d.htm">ReadDecimal(EndianType)</a></td><td>
            从当前流位置读取一个<span class="noLink">Decimal</span>值
            </td></tr><tr><td><a href="36d2fe31-cd80-4613-adde-4ad6ccadb6ae.htm">ReadDouble<span id="LSTE23151BB_20" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">Double</span>值
            </td></tr><tr><td><a href="a3fa1177-57ba-6890-19e3-3dbb96d1834a.htm">ReadDouble(EndianType)</a></td><td>
            从当前流位置读取一个<span class="noLink">Double</span>值
            </td></tr><tr><td><a href="deaa1130-2780-7e5a-3388-ed1d7620e150.htm">ReadFloat<span id="LSTE23151BB_21" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">Single</span>值
            </td></tr><tr><td><a href="48c85513-11de-44d0-c82b-8fa5c3bfd874.htm">ReadFloat(EndianType)</a></td><td>
            从当前流位置读取一个<span class="noLink">Single</span>值
            </td></tr><tr><td><a href="73d64f58-c9e8-53fb-e5a1-15b39223332e.htm">ReadInt16<span id="LSTE23151BB_22" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">Int16</span>值
            </td></tr><tr><td><a href="69582a21-8348-7a07-b6de-1187ec6024d4.htm">ReadInt16(EndianType)</a></td><td>
            从当前流位置读取一个<span class="noLink">Int16</span>值
            </td></tr><tr><td><a href="88f9b429-637a-7e2a-3199-c53fa0767b07.htm">ReadInt32<span id="LSTE23151BB_23" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">Int32</span>值
            </td></tr><tr><td><a href="1a58711d-64e1-f6c5-f109-26b127f78082.htm">ReadInt32(EndianType)</a></td><td>
            从当前流位置读取一个指定端序的<span class="noLink">Int32</span>值
            </td></tr><tr><td><a href="76f20087-c7e2-9e06-c6cf-e161e10d73b0.htm">ReadInt64<span id="LSTE23151BB_24" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">Int64</span>值
            </td></tr><tr><td><a href="6876476a-6c93-7096-6382-8047a449c710.htm">ReadInt64(EndianType)</a></td><td>
            从当前流位置读取一个<span class="noLink">Int64</span>值
            </td></tr><tr><td><a href="78193dae-95dd-80e4-087b-7a6d04f75203.htm">ReadIsNull</a></td><td>
            从当前流位置读取一个标识值，判断是否为null。
            </td></tr><tr><td><a href="a00e0401-0041-ddda-d1b8-2dcb784f2532.htm">ReadObject<span id="LSTE23151BB_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTE23151BB_26" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
             从当前流位置读取一个泛型值
            </td></tr><tr><td><a href="0ace74cc-6c44-9e8c-6fe4-5d44cb6e71ef.htm">ReadString</a></td><td>
            从当前流位置读取一个<span class="noLink">String</span>值
            </td></tr><tr><td><a href="c740e3f8-8767-d512-e822-6b1d8c156e58.htm">ReadTimeSpan</a></td><td>
            从当前流位置读取一个<span class="noLink">TimeSpan</span>值
            </td></tr><tr><td><a href="b0727181-a7bc-cfe3-a478-d9a8c33bd1ee.htm">ReadToArray</a></td><td>
            从当前位置读取指定长度的数组。并递增<a href="f62a4c34-26a4-f121-7b86-c2924ccdc867.htm">Position</a></td></tr><tr><td><a href="74a70f6f-d9e1-542b-650d-f1c10d26a1c4.htm">ReadUInt16<span id="LSTE23151BB_27" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">UInt16</span>值
            </td></tr><tr><td><a href="75cf1ce5-8338-b893-9427-cb3d09461b64.htm">ReadUInt16(EndianType)</a></td><td>
            从当前流位置读取一个<span class="noLink">UInt16</span>值
            </td></tr><tr><td><a href="3c26db8d-a8f5-4676-c6bb-4946b18bbcf4.htm">ReadUInt32<span id="LSTE23151BB_28" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">UInt32</span>值
            </td></tr><tr><td><a href="78050a9c-e400-f6a5-e0b6-f50d2faabdb3.htm">ReadUInt32(EndianType)</a></td><td>
            从当前流位置读取一个<span class="noLink">UInt32</span>值
            </td></tr><tr><td><a href="70a985f4-41a1-a4ab-5871-18de2257478a.htm">ReadUInt64<span id="LSTE23151BB_29" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从当前流位置读取一个默认端序的<span class="noLink">UInt64</span>值
            </td></tr><tr><td><a href="4188696b-21f0-478b-9fe6-3baecb61fe5e.htm">ReadUInt64(EndianType)</a></td><td>
            从当前流位置读取一个<span class="noLink">UInt64</span>值
            </td></tr><tr><td><a href="ab211a7a-d16d-42fc-5d3a-5e7eab96066f.htm">Reset</a></td><td>
            将内存块初始化到刚申请的状态。
            <p>仅仅重置<a href="f62a4c34-26a4-f121-7b86-c2924ccdc867.htm">Position</a>和<a href="3d55c47d-e08b-06c4-326f-263baca31212.htm">Length</a>属性。</p></td></tr><tr><td><a href="f34596a0-f689-8252-173d-7f7d75629a55.htm">Seek(Int32)</a></td><td>
            移动游标
            </td></tr><tr><td><a href="ca7ab17a-c258-a28e-ece3-6a7fb4f2c12e.htm">Seek(Int64, SeekOrigin)</a></td><td>
            设置流位置
            </td></tr><tr><td><a href="15941f29-0135-9288-3638-a1838ff14056.htm">SeekToEnd</a></td><td>
            设置游标到末位
            </td></tr><tr><td><a href="9631ee10-efa8-4b46-ce12-7374cc57d208.htm">SeekToStart</a></td><td>
            设置游标到首位
            </td></tr><tr><td><a href="f8213969-5bb2-8676-72be-4064fc71dc4c.htm">SetCapacity</a></td><td>
            重新设置容量
            </td></tr><tr><td><a href="148fcd2a-0ead-c71b-eb03-c1f09e9102c0.htm">SetHolding</a></td><td>
            设置持续持有属性，当为True时，调用Dispose会失效，表示该对象将长期持有，直至设置为False。
            当为False时，会自动调用Dispose。
            </td></tr><tr><td><a href="dfdafb6d-b5f8-e7f4-7a42-ba6ec3581d23.htm">SetLength</a></td><td>
            设置实际长度
            </td></tr><tr><td><a href="91213726-9639-e111-bbff-6b32cac0b432.htm">ToArray<span id="LSTE23151BB_30" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            转换为有效内存。本操作不递增<a href="f62a4c34-26a4-f121-7b86-c2924ccdc867.htm">Position</a></td></tr><tr><td><a href="275ee9fa-f99d-6f47-844a-99e1beffbc66.htm">ToArray(Int32)</a></td><td>
            从指定位置转为有效内存。本操作不递增<a href="f62a4c34-26a4-f121-7b86-c2924ccdc867.htm">Position</a></td></tr><tr><td><a href="0eaa6712-65cd-6efb-489b-93f221caef19.htm">ToArray(Int32, Int32)</a></td><td>
            从指定位置转化到指定长度的有效内存。本操作不递增<a href="f62a4c34-26a4-f121-7b86-c2924ccdc867.htm">Position</a></td></tr><tr><td><a href="e4138e2c-6120-bdbd-7000-ed9015a18ea0.htm">ToArrayTake</a></td><td>
            将当前<a href="f62a4c34-26a4-f121-7b86-c2924ccdc867.htm">Position</a>至指定长度转化为有效内存。本操作不递增<a href="f62a4c34-26a4-f121-7b86-c2924ccdc867.htm">Position</a></td></tr><tr><td><a href="0c19506a-3bfe-707e-33de-25a3ba0f815a.htm">ToBoolensFromBit</a></td><td>
            将当前有效内存按位转为<span class="noLink">Boolean</span>集合。
            </td></tr><tr><td><a href="2d9910cb-8c65-ac85-5e1d-509d357f011e.htm">ToBoolensFromByte</a></td><td>
            将当前有效内存按字节转为<span class="noLink">Boolean</span>集合。
            </td></tr><tr><td><a href="91a51860-a471-3f5b-c3f1-1e7f042d2822.htm">ToChars<span id="LSTE23151BB_31" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">Char</span>集合。
            </td></tr><tr><td><a href="ec45a56b-93ba-462b-4be3-b7490ac49164.htm">ToChars(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">Char</span>集合。
            </td></tr><tr><td><a href="6827b201-05ab-d9d5-9c67-81077ac5f430.htm">ToDateTimes</a></td><td>
            将当前有效内存转为<span class="noLink">DateTime</span>集合。
            </td></tr><tr><td><a href="8b8cb68e-98fa-247e-0e41-99f9bd57fdd0.htm">ToDecimals<span id="LSTE23151BB_32" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">Decimal</span>集合。
            </td></tr><tr><td><a href="af330cc0-aa60-f468-7bd8-fad1b0aa7777.htm">ToDecimals(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">Decimal</span>集合。
            </td></tr><tr><td><a href="7645b81a-0c5d-9280-f516-744363b1c18a.htm">ToDoubles<span id="LSTE23151BB_33" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">Double</span>集合。
            </td></tr><tr><td><a href="c07fcdce-5757-be4f-01a1-2d31ff6ba70d.htm">ToDoubles(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">Double</span>集合。
            </td></tr><tr><td><a href="73a6a6c9-9cfa-3f9d-c907-7f7d2413cee9.htm">ToFloats<span id="LSTE23151BB_34" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">Single</span>集合。
            </td></tr><tr><td><a href="26ff811f-ee2c-be78-c17f-84f3bf3bfcb8.htm">ToFloats(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">Single</span>集合。
            </td></tr><tr><td><a href="b6fd31d8-c3bb-8ee3-78bf-de4e655fc6ff.htm">ToInt16s<span id="LSTE23151BB_35" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">Int16</span>集合。
            </td></tr><tr><td><a href="939bfa25-a9a0-c853-1d6d-52e79c4f56b1.htm">ToInt16s(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">Int16</span>集合。
            </td></tr><tr><td><a href="2ed6ad15-1e61-7564-987b-4bf0e0ab5fdd.htm">ToInt32s<span id="LSTE23151BB_36" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">Int32</span>集合。
            </td></tr><tr><td><a href="cc95ab59-b237-e602-1aaf-3d4c618ba241.htm">ToInt32s(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">Int32</span>集合。
            </td></tr><tr><td><a href="fbd87293-6ee5-b542-05c9-5fd1f74d37e7.htm">ToInt64s<span id="LSTE23151BB_37" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">Int64</span>集合。
            </td></tr><tr><td><a href="f70df53a-2748-fbc0-04cd-68f88d97a4dd.htm">ToInt64s(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">Int64</span>集合。
            </td></tr><tr><td><a href="f9af877e-5700-8e66-9aed-6b85a5d4f323.htm">ToString<span id="LSTE23151BB_38" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            从指定位置转化到有效内存
            <br />(重写 <span class="noLink">Object<span id="LSTE23151BB_39" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LSTE23151BB_40" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>)</td></tr><tr><td><a href="5e8f6185-c4ac-5a77-2539-bdc06d070ab6.htm">ToString(Int32)</a></td><td>
            转换为UTF-8字符
            </td></tr><tr><td><a href="43e94f05-e415-4e70-e000-572c19be8d24.htm">ToString(Int32, Int32)</a></td><td>
            转换为UTF-8字符
            </td></tr><tr><td><a href="f26b15af-aed1-a5e1-0259-876ab47c70e0.htm">ToTimeSpans</a></td><td>
            将当前有效内存转为<span class="noLink">TimeSpan</span>集合。
            </td></tr><tr><td><a href="4151b85a-16f8-0a35-d0e4-3cfa73cadbc6.htm">ToUInt16s<span id="LSTE23151BB_41" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">UInt16</span>集合。
            </td></tr><tr><td><a href="52a46bd3-ea5a-623a-862a-5a1f91c03378.htm">ToUInt16s(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">UInt16</span>集合。
            </td></tr><tr><td><a href="ddb273cc-acb5-7ff7-cdaa-08e91b7f6ab7.htm">ToUInt32s<span id="LSTE23151BB_42" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">UInt32</span>集合。
            </td></tr><tr><td><a href="005bf167-7194-6f25-685b-0fdd29c95ae7.htm">ToUInt32s(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">UInt32</span>集合。
            </td></tr><tr><td><a href="e3695016-5136-3abf-96b8-9934eff6575a.htm">ToUInt64s<span id="LSTE23151BB_43" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            将当前有效内存转为默认端序的<span class="noLink">UInt64</span>集合。
            </td></tr><tr><td><a href="ff6aab90-edfd-a9c7-d791-1df02521a207.htm">ToUInt64s(EndianType)</a></td><td>
            将当前有效内存转为指定端序的<span class="noLink">UInt64</span>集合。
            </td></tr><tr><td><a href="c99e36b3-2237-4317-b6f0-359efa4679ab.htm">TryReadBytesPackageInfo</a></td><td>
            尝试获取数据包信息，方便从Buffer操作数据
            </td></tr><tr><td><a href="5b3573e8-1832-d036-381d-3082921eae08.htm">Write(Boolean)</a></td><td>
            写入<span class="noLink">Boolean</span>值
            </td></tr><tr><td><a href="e33a7270-e571-3e52-7569-4542c3e3bed6.htm">Write(<span id="LSTE23151BB_44" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LSTE23151BB_45" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            写入bool数组。
            </td></tr><tr><td><a href="bd8533a3-b93f-33a8-9f15-ab7aba386a93.htm">Write(Byte)</a></td><td>
            写入<span class="noLink">Byte</span>值
            </td></tr><tr><td><a href="c0c4b840-2551-15a5-4d77-416b2abfd175.htm">Write(<span id="LSTE23151BB_46" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_47" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
    
            写入
            
  </td></tr><tr><td><a href="a2d8af49-818f-806c-fd78-caccd7233e1a.htm">Write(Char)</a></td><td>
            写入默认端序的<span class="noLink">Char</span>值
            </td></tr><tr><td><a href="946e0482-9b45-d11b-b7aa-f89a8d9303d9.htm">Write(DateTime)</a></td><td>
            写入<span class="noLink">DateTime</span>值
            </td></tr><tr><td><a href="522df5eb-628b-16a0-09fd-58cf9e63e3b2.htm">Write(Decimal)</a></td><td>
            写入默认端序的<span class="noLink">Decimal</span>值
            </td></tr><tr><td><a href="c5c25509-cdb3-4398-d345-1d8682e5df27.htm">Write(Double)</a></td><td>
            写入默认端序的<span class="noLink">Double</span>值
            </td></tr><tr><td><a href="32008bd2-3520-6199-8ea1-ff9aadc8b41f.htm">Write(Int16)</a></td><td>
            写入默认端序的<span class="noLink">Int16</span>值
            </td></tr><tr><td><a href="bad44af7-6c75-63a8-4df3-a95636507215.htm">Write(Int32)</a></td><td>
            写入默认端序的<span class="noLink">Int32</span>值
            </td></tr><tr><td><a href="3b5df16e-1d52-ed6e-4bdb-9168a411b549.htm">Write(Int64)</a></td><td>
            写入默认端序的<span class="noLink">Int64</span>值
            </td></tr><tr><td><a href="06543273-e079-d404-3a50-a37b76f73039.htm">Write(Single)</a></td><td>
            写入默认端序的<span class="noLink">Single</span>值
            </td></tr><tr><td><a href="9d5f0e8c-ccba-2d4f-61bb-a1743aa93ade.htm">Write(String)</a></td><td>
            写入<span class="noLink">String</span>值。值可以为null，或者空。
            <p>注意：该操作不具备通用性，读取时必须使用ReadString。或者得先做出判断，由默认端序的int32值标识，具体如下：</p><ul><li>小于0，表示字符串为null</li><li>等于0，表示字符串为""</li><li>大于0，表示字符串在utf-8编码下的字节长度。</li></ul></td></tr><tr><td><a href="0807a4df-7e6a-991c-be63-b3b614f15aa3.htm">Write(TimeSpan)</a></td><td>
            写入<span class="noLink">TimeSpan</span>值
            </td></tr><tr><td><a href="a6dea936-6ff5-ef83-9eb1-58b3d59fbcae.htm">Write(UInt16)</a></td><td>
            写入默认端序的<span class="noLink">UInt16</span>值
            </td></tr><tr><td><a href="4a7c37c9-640c-7eac-e806-4ca022f4896f.htm">Write(UInt32)</a></td><td>
            写入默认端序的<span class="noLink">UInt32</span>值
            </td></tr><tr><td><a href="dbb353e3-7299-3da2-e43d-eeb7b0c7680c.htm">Write(UInt64)</a></td><td>
            写入默认端序的<span class="noLink">UInt64</span>值
            </td></tr><tr><td><a href="0a0557bf-e55f-0195-00f8-bc85dfb4d192.htm">Write(ValueByteBlock)</a></td><td>
            将<a href="7812fa1a-471f-638e-df81-c60e2c986666.htm">ByteBlock</a>中的有效数据写入到当前
            </td></tr><tr><td><a href="2a56614b-fbe2-a8af-b3a1-dd00a62f1bc6.htm">Write(Char, EndianType)</a></td><td>
            写入<span class="noLink">Char</span>值
            </td></tr><tr><td><a href="86ddeda3-145a-58a0-68fd-8438c58a1487.htm">Write(Decimal, EndianType)</a></td><td>
            写入<span class="noLink">Decimal</span>值
            </td></tr><tr><td><a href="1d70961a-a88e-6464-a4a0-224ae2e01381.htm">Write(Double, EndianType)</a></td><td>
            写入<span class="noLink">Double</span>值
            </td></tr><tr><td><a href="af784c77-5d9a-7a10-4d31-fe7c633c91e8.htm">Write(Int16, EndianType)</a></td><td>
            写入<span class="noLink">Int16</span>值
            </td></tr><tr><td><a href="389e3cd2-0a26-44b1-e7b0-74e1ff2d4a5e.htm">Write(Int32, EndianType)</a></td><td>
            写入指定端序的<span class="noLink">Int32</span>值
            </td></tr><tr><td><a href="a7fbd815-c49f-2478-4e83-4abf4a977569.htm">Write(Int64, EndianType)</a></td><td>
            写入<span class="noLink">Int64</span>值
            </td></tr><tr><td><a href="48ebc730-bb87-2e2f-9b17-5666114cacfa.htm">Write(Single, EndianType)</a></td><td>
            写入<span class="noLink">Single</span>值
            </td></tr><tr><td><a href="487d4aff-3a9a-57e8-b330-dbb9c2e422a3.htm">Write(UInt16, EndianType)</a></td><td>
            写入<span class="noLink">UInt16</span>值
            </td></tr><tr><td><a href="451a4604-137b-d414-23cf-514f503e0adc.htm">Write(UInt32, EndianType)</a></td><td>
            写入<span class="noLink">UInt32</span>值
            </td></tr><tr><td><a href="ebd82881-c0cb-74b1-d162-f9a59088c54e.htm">Write(UInt64, EndianType)</a></td><td>
            写入<span class="noLink">UInt64</span>值
            </td></tr><tr><td><a href="be1198dc-9789-2d95-23fd-55e917bd1456.htm">Write(<span id="LSTE23151BB_48" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_49" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            写入
            </td></tr><tr><td><a href="e54fc36e-d026-f51c-d351-db257cc194d5.htm">WriteByteBlock</a></td><td>
            写入<a href="7812fa1a-471f-638e-df81-c60e2c986666.htm">ByteBlock</a>值
            </td></tr><tr><td><a href="6afe81d4-d870-2939-cd3e-e6e39c21248e.htm">WriteBytesPackage(<span id="LSTE23151BB_50" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_51" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            写入一个独立的<span class="noLink">Byte</span>数组包。值可以为null。
            </td></tr><tr><td><a href="fc185f16-b460-efa1-d9fd-955e6381d6cc.htm">WriteBytesPackage(<span id="LSTE23151BB_52" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_53" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            写入一个独立的<span class="noLink">Byte</span>数组包，值可以为null。
            </td></tr><tr><td><a href="e57c0b86-b3b2-f6fe-a11e-0edbfaab4b5d.htm">WriteIsNull<span id="LSTE23151BB_54" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTE23151BB_55" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Nullable<span id="LSTE23151BB_56" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTE23151BB_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            判断该值是否为Null，然后写入标识值
            </td></tr><tr><td><a href="cfb60e6a-5987-50d8-4755-66af7780aa4d.htm">WriteIsNull<span id="LSTE23151BB_58" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTE23151BB_59" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T)</a></td><td>
            判断该值是否为Null，然后写入标识值
            </td></tr><tr><td><a href="70ce0e2b-fc69-4824-242a-25b74ffe3234.htm">WriteNotNull</a></td><td>
            写入一个标识非Null值
            </td></tr><tr><td><a href="6c3b7367-236d-f3ad-e2a9-e5e304654b4f.htm">WriteNull</a></td><td>
            写入一个标识Null值
            </td></tr><tr><td><a href="b716b59e-8320-a0b2-9612-e9ed964c3d8f.htm">WriteObject</a></td><td>
            写入<span class="noLink">Object</span>值
            </td></tr><tr><td><a href="c9cf54c4-9f57-830d-0e97-19a6564e0c0c.htm">WriteString</a></td><td>
            写入<span class="noLink">String</span>值。值必须为有效值。可通用解析。
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>运算符</h2><div id="IDAQFASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="e15b7ad8-ef28-e28b-99fb-a91e41d1d896.htm"><span id="LSTE23151BB_60" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(ValueByteBlock to ArraySegment<span id="LSTE23151BB_61" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Byte<span id="LSTE23151BB_62" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            将<a href="7812fa1a-471f-638e-df81-c60e2c986666.htm">ByteBlock</a>转为<span class="noLink">ArraySegment<span id="LSTE23151BB_63" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTE23151BB_64" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span>。
            <p>注意：实际上是产生了一个新的内存。</p></td></tr><tr><td><a href="b4bbea69-645d-380b-50a0-fd1e246d8213.htm"><span id="LSTE23151BB_65" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(ValueByteBlock to <span id="LSTE23151BB_66" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTE23151BB_67" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            将<a href="7812fa1a-471f-638e-df81-c60e2c986666.htm">ByteBlock</a>转为<span class="noLink">Byte</span>数组。
            <p>注意：实际上是产生了一个新的内存。</p></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>扩展方法</h2><div id="IDAFASection"><table id="ExtensionList" class="table is-hoverable"><tr><td><a href="878403cd-f12c-edde-588e-08269fc9e04c.htm">Map</a></td><td>
            简单对象映射
            <br />(由 <a href="02bbd272-534f-46ef-2987-02490a9e41e9.htm">Mapper</a> 定义。)</td></tr><tr><td><a href="fb7e6dd3-8e3a-2831-644a-c77d3c5d6d6e.htm">Map</a></td><td>
            简单对象映射
            <br />(由 <a href="02bbd272-534f-46ef-2987-02490a9e41e9.htm">Mapper</a> 定义。)</td></tr><tr><td><a href="9a18a592-c63b-7ce8-f2d6-6d9ac6e2d62e.htm">Map<span id="LSTE23151BB_68" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TTarget<span id="LSTE23151BB_69" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            简单映射
            <br />(由 <a href="02bbd272-534f-46ef-2987-02490a9e41e9.htm">Mapper</a> 定义。)</td></tr><tr><td><a href="42561b0b-8ddf-b261-08a5-1b07b9de94b4.htm">SafeDispose</a></td><td>
            安全性释放（不用判断对象是否为空）。不会抛出任何异常。
            <br />(由 <a href="08dccf0a-072b-52b7-b602-1958417b7198.htm">SystemExtensions</a> 定义。)</td></tr><tr><td><a href="0c8d4cc8-38de-cbf6-43ac-d65d145fe130.htm">ToJsonString</a></td><td>
            转换为Json
            <br />(由 <a href="8552a33c-c4bb-54b7-1888-08ff2740edab.htm">SerializeConvert</a> 定义。)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>显式接口实现</h2><div id="ID0OB0FASection"><table id="ExplicitInterfaceImplementationList" class="table is-hoverable"><tr><td><a href="2e6a4ccb-527f-93f2-6b8d-6989272d9e74.htm">IEnumerable<span id="LSTE23151BB_70" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetEnumerator</a></td><td>Returns an enumerator that iterates through a collection.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>参见</h2><div id="seeAlsoSection"><h4>引用</h4><div><a href="6bd098f4-7c88-a31a-e48b-613ce7814aac.htm">TouchSocket.Core 命名空间</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">构造函数</a></li><li><a class="quickLink">属性</a></li><li><a class="quickLink">方法</a></li><li><a class="quickLink">运算符</a></li><li><a class="quickLink">扩展方法</a></li><li><a class="quickLink">显式接口实现</a></li><li><a class="quickLink">参见</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p>Copyright © 2020-2024 若汝棋茗.</p><div class="feedbackLink">有关这个主题的评论请发邮件到
        <a id="HT_MailLink" href="mailto:505554090%40qq.com?Subject=TouchSocket手册">邮箱</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>