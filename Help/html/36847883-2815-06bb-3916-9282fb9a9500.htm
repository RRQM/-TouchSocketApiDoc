<!DOCTYPE html ><html lang="zh-CN"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><link rel="stylesheet" href="../css/zh-CN.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>FileStorageStream 方法</title><meta name="Title" content="方法" /><meta name="Help.Id" content="Methods.T:TouchSocket.Core.FileStorageStream" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="TouchSocket.Core" /><meta name="guid" content="36847883-2815-06bb-3916-9282fb9a9500" /><meta name="tocFile" content="../toc/ID0MC0C.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">TouchSocket手册</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><div id="HeaderPrelimContainer" class="level my-1 px-2"><div id="HeaderTextContainer" class="level-left"><div class="level-item"><span class="has-text-grey-light">一款简单易用的基础网络通讯组件库。</span></div></div></div><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>File<wbr />Storage<wbr />Stream 方法</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>方法</h2><div id="IDEDASection"><table id="MethodList" class="table is-hoverable"><tr><td><span class="noLink">BeginRead</span></td><td>Begins an asynchronous read operation. (Consider using <span class="noLink">ReadAsync(<span id="LST6CE18B37_0" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_1" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</span> instead.)<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">BeginWrite</span></td><td>Begins an asynchronous write operation. (Consider using <span class="noLink">WriteAsync(<span id="LST6CE18B37_2" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_3" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</span> instead.)<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">Close</span></td><td>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">CopyTo(Stream)</span></td><td>Reads the bytes from the current stream and writes them to another stream.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">CopyTo(Stream, Int32)</span></td><td>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">CopyToAsync(Stream)</span></td><td>Asynchronously reads the bytes from the current stream and writes them to another stream.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">CopyToAsync(Stream, Int32)</span></td><td>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">CopyToAsync(Stream, CancellationToken)</span></td><td>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified cancellation token.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">CopyToAsync(Stream, Int32, CancellationToken)</span></td><td>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">CreateWaitHandle</span></td><td>Allocates a <span class="noLink">WaitHandle</span> object.<br />(继承自 <span class="noLink">Stream</span>。)<br /><span class="tag is-danger">已过时。</span></td></tr><tr><td><span class="noLink">Dispose<span id="LST6CE18B37_4" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span></td><td>Releases all resources used by the <span class="noLink">Stream</span>.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><a href="d2f5a412-497e-77eb-6caf-b3691cb8494f.htm">Dispose(Boolean)</a></td><td>
    Releases the unmanaged resources used by the <span class="noLink">Stream</span> and optionally releases the managed resources.
  <br />(重写 <span class="noLink">Stream<span id="LST6CE18B37_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Dispose(Boolean)</span>)</td></tr><tr><td><span class="noLink">DisposeAsync</span></td><td>Asynchronously releases the unmanaged resources used by the <span class="noLink">Stream</span>.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">EndRead</span></td><td>Waits for the pending asynchronous read to complete. (Consider using <span class="noLink">ReadAsync(<span id="LST6CE18B37_6" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_7" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</span> instead.)<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">EndWrite</span></td><td>Ends an asynchronous write operation. (Consider using <span class="noLink">WriteAsync(<span id="LST6CE18B37_8" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_9" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</span> instead.)<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">Equals</span></td><td>Determines whether the specified object is equal to the current object.<br />(继承自 <span class="noLink">Object</span>。)</td></tr><tr><td><a href="f795d01f-f3c3-0aaf-899d-0d1c2c680a8e.htm">Finalize</a></td><td>
            析构函数
            <br />(重写 <span class="noLink">Object<span id="LST6CE18B37_10" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Finalize<span id="LST6CE18B37_11" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>)</td></tr><tr><td><a href="05143f31-edc1-9203-198f-f310f8c6b70b.htm">Flush</a></td><td>
    When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
  <br />(重写 <span class="noLink">Stream<span id="LST6CE18B37_12" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Flush<span id="LST6CE18B37_13" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>)</td></tr><tr><td><span class="noLink">FlushAsync<span id="LST6CE18B37_14" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span></td><td>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">FlushAsync(CancellationToken)</span></td><td>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">GetHashCode</span></td><td>Serves as the default hash function.<br />(继承自 <span class="noLink">Object</span>。)</td></tr><tr><td><span class="noLink">GetLifetimeService</span></td><td>Retrieves the current lifetime service object that controls the lifetime policy for this instance.<br />(继承自 <span class="noLink">MarshalByRefObject</span>。)<br /><span class="tag is-danger">已过时。</span></td></tr><tr><td><span class="noLink">GetType</span></td><td>Gets the <span class="noLink">Type</span> of the current instance.<br />(继承自 <span class="noLink">Object</span>。)</td></tr><tr><td><span class="noLink">InitializeLifetimeService</span></td><td>Obtains a lifetime service object to control the lifetime policy for this instance.<br />(继承自 <span class="noLink">MarshalByRefObject</span>。)<br /><span class="tag is-danger">已过时。</span></td></tr><tr><td><span class="noLink">MemberwiseClone<span id="LST6CE18B37_15" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span></td><td>Creates a shallow copy of the current <span class="noLink">Object</span>.<br />(继承自 <span class="noLink">Object</span>。)</td></tr><tr><td><span class="noLink">MemberwiseClone(Boolean)</span></td><td>Creates a shallow copy of the current <span class="noLink">MarshalByRefObject</span> object.<br />(继承自 <span class="noLink">MarshalByRefObject</span>。)</td></tr><tr><td><span class="noLink">ObjectInvariant</span></td><td>Provides support for a <span class="noLink">Contract</span>.<br />(继承自 <span class="noLink">Stream</span>。)<br /><span class="tag is-danger">已过时。</span></td></tr><tr><td><span class="noLink">Read(Span<span id="LST6CE18B37_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Byte<span id="LST6CE18B37_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</span></td><td>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><a href="5b3b6101-8346-1452-6d15-0a983c697478.htm">Read(<span id="LST6CE18B37_18" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_19" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
    When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
  <br />(重写 <span class="noLink">Stream<span id="LST6CE18B37_20" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Read(<span id="LST6CE18B37_21" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_22" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</span>)</td></tr><tr><td><span class="noLink">ReadAsync(Memory<span id="LST6CE18B37_23" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Byte<span id="LST6CE18B37_24" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, CancellationToken)</span></td><td>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">ReadAsync(<span id="LST6CE18B37_25" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_26" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</span></td><td>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">ReadAsync(<span id="LST6CE18B37_27" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_28" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32, CancellationToken)</span></td><td>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">ReadByte</span></td><td>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><a href="8b4b16b9-3358-b189-2ce4-db6be730cd3c.htm">Seek</a></td><td>
    When overridden in a derived class, sets the position within the current stream.
  <br />(重写 <span class="noLink">Stream<span id="LST6CE18B37_29" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Seek(Int64, SeekOrigin)</span>)</td></tr><tr><td><a href="b86b8903-93b2-0628-d293-a1125945de01.htm">SetLength</a></td><td>
    When overridden in a derived class, sets the length of the current stream.
  <br />(重写 <span class="noLink">Stream<span id="LST6CE18B37_30" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SetLength(Int64)</span>)</td></tr><tr><td><span class="noLink">ToString</span></td><td>Returns a string that represents the current object.<br />(继承自 <span class="noLink">Object</span>。)</td></tr><tr><td><span class="noLink">Write(ReadOnlySpan<span id="LST6CE18B37_31" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Byte<span id="LST6CE18B37_32" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</span></td><td>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><a href="04c690f9-acdd-d21f-e197-a9a5080045c6.htm">Write(<span id="LST6CE18B37_33" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_34" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
    When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
  <br />(重写 <span class="noLink">Stream<span id="LST6CE18B37_35" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Write(<span id="LST6CE18B37_36" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_37" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</span>)</td></tr><tr><td><span class="noLink">WriteAsync(ReadOnlyMemory<span id="LST6CE18B37_38" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Byte<span id="LST6CE18B37_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, CancellationToken)</span></td><td>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">WriteAsync(<span id="LST6CE18B37_40" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_41" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</span></td><td>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">WriteAsync(<span id="LST6CE18B37_42" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST6CE18B37_43" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32, CancellationToken)</span></td><td>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr><tr><td><span class="noLink">WriteByte</span></td><td>Writes a byte to the current position in the stream and advances the position within the stream by one byte.<br />(继承自 <span class="noLink">Stream</span>。)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>扩展方法</h2><div id="IDADASection"><table id="ExtensionList" class="table is-hoverable"><tr><td><a href="878403cd-f12c-edde-588e-08269fc9e04c.htm">Map</a></td><td>
            简单对象映射
            <br />(由 <a href="02bbd272-534f-46ef-2987-02490a9e41e9.htm">Mapper</a> 定义。)</td></tr><tr><td><a href="fb7e6dd3-8e3a-2831-644a-c77d3c5d6d6e.htm">Map</a></td><td>
            简单对象映射
            <br />(由 <a href="02bbd272-534f-46ef-2987-02490a9e41e9.htm">Mapper</a> 定义。)</td></tr><tr><td><a href="9a18a592-c63b-7ce8-f2d6-6d9ac6e2d62e.htm">Map<span id="LST6CE18B37_44" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TTarget<span id="LST6CE18B37_45" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            简单映射
            <br />(由 <a href="02bbd272-534f-46ef-2987-02490a9e41e9.htm">Mapper</a> 定义。)</td></tr><tr><td><a href="0c8d4cc8-38de-cbf6-43ac-d65d145fe130.htm">ToJsonString</a></td><td>
            转换为Json
            <br />(由 <a href="8552a33c-c4bb-54b7-1888-08ff2740edab.htm">SerializeConvert</a> 定义。)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>参见</h2><div id="seeAlsoSection"><h4>引用</h4><div><a href="5d904da4-099f-7f56-dd5d-3efa22c036e5.htm">FileStorageStream 类</a></div><div><a href="6bd098f4-7c88-a31a-e48b-613ce7814aac.htm">TouchSocket.Core 命名空间</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">方法</a></li><li><a class="quickLink">扩展方法</a></li><li><a class="quickLink">参见</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p>Copyright © 2020-2024 若汝棋茗.</p><div class="feedbackLink">有关这个主题的评论请发邮件到
        <a id="HT_MailLink" href="mailto:505554090%40qq.com?Subject=TouchSocket手册">邮箱</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>